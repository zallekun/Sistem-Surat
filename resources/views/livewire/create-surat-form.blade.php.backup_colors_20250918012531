<style>
    /* Force button visibility - Override any parent CSS */
    .create-surat-form button,
    .create-surat-form a {
        opacity: 1 !important;
        visibility: visible !important;
    }
    
    /* Remove any hover-only visibility */
    .create-surat-form button:not(:hover),
    .create-surat-form a:not(:hover) {
        opacity: 1 !important;
        visibility: visible !important;
    }
    
    /* Ensure all child elements are visible */
    .create-surat-form button *,
    .create-surat-form a * {
        opacity: 1 !important;
        visibility: visible !important;
    }
    
    /* Override any Tailwind opacity utilities */
    .create-surat-form .opacity-0 {
        opacity: 1 !important;
    }
    
    /* Debug: Add border to see if buttons are actually there */
    .create-surat-form button,
    .create-surat-form a[href*="surat"] {
        border: 1px solid currentColor !important;
    }
</style>

<div class="create-surat-form">
    <form wire:submit.prevent="saveSurat">
        <div class="bg-white overflow- shadow-sm sm:rounded-lg">
            <div class="p-6 bg-white border-b border-gray-200">
                <h2 class="font-semibold text-xl text-gray-800 mb-4">Buat Surat Baru</h2>
                
                {{-- Nomor Surat --}}
                <div class="mb-4">
                    <label for="nomor_surat" class="block text-sm font-medium text-gray-700">Nomor Surat</label>
                    <input type="text" 
                           wire:model="nomor_surat" 
                           id="nomor_surat"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                           readonly>
                    @error('nomor_surat') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Perihal --}}
                <div class="mb-4">
                    <label for="perihal" class="block text-sm font-medium text-gray-700">Perihal <span class="text-red-500">*</span></label>
                    <input type="text" 
                           wire:model="perihal" 
                           id="perihal"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                           required>
                    @error('perihal') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Tujuan Jabatan --}}
                <div class="mb-4">
                    <label for="tujuan_jabatan_id" class="block text-sm font-medium text-gray-700">Tujuan <span class="text-red-500">*</span></label>
                    <select wire:model="tujuan_jabatan_id" 
                            id="tujuan_jabatan_id"
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                            required>
                        <option value="">Pilih Tujuan</option>
                        @foreach($tujuanJabatanOptions as $jabatan)
                            <option value="{{ $jabatan->id }}">{{ $jabatan->nama_jabatan }}</option>
                        @endforeach
                    </select>
                    @error('tujuan_jabatan_id') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Lampiran --}}
                <div class="mb-4">
                    <label for="lampiran" class="block text-sm font-medium text-gray-700">Lampiran</label>
                    <input type="text" 
                           wire:model="lampiran" 
                           id="lampiran"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                           placeholder="Contoh: 1 bendel">
                    @error('lampiran') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Fakultas --}}
                <div class="mb-4">
                    <label for="fakultas" class="block text-sm font-medium text-gray-700">Fakultas</label>
                    <input type="text" 
                           value="{{ $fakultas_name }}" 
                           class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 shadow-sm sm:text-sm"
                           readonly>
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Program Studi (jika bukan Staff Fakultas) --}}
                @if(!$isStaffFakultas)
                <div class="mb-4">
                    <label for="prodi" class="block text-sm font-medium text-gray-700">Program Studi</label>
                    <input type="text" 
                           value="{{ $prodi_name }}" 
                           class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 shadow-sm sm:text-sm"
                           readonly>
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>
                @endif

                {{-- Tanggal Surat --}}
                <div class="mb-4">
                    <label for="tanggal_surat" class="block text-sm font-medium text-gray-700">Tanggal Surat <span class="text-red-500">*</span></label>
                    <input type="date" 
                           wire:model="tanggal_surat" 
                           id="tanggal_surat"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                           required>
                    @error('tanggal_surat') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Sifat Surat --}}
                <div class="mb-4">
                    <label for="sifat_surat" class="block text-sm font-medium text-gray-700">Sifat Surat <span class="text-red-500">*</span></label>
                    <select wire:model="sifat_surat" 
                            id="sifat_surat"
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                            required>
                        <option value="">Pilih Sifat Surat</option>
                        @foreach($sifatSuratOptions as $sifat)
                            <option value="{{ $sifat }}">{{ $sifat }}</option>
                        @endforeach
                    </select>
                    @error('sifat_surat') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- File Surat --}}
                <div class="mb-4">
                    <label for="file_surat" class="block text-sm font-medium text-gray-700">File Surat (PDF) <span class="text-red-500">*</span></label>
                    <input type="file" 
                           wire:model="file_surat" 
                           id="file_surat"
                           accept="application/pdf"
                           class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"
                           required>
                    @error('file_surat') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                    
                    <div wire:loading wire:target="file_surat" class="mt-2">
                        <span class="text-sm text-gray-500">Uploading...</span>
                    
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>

                {{-- Action Buttons --}}
                <div class="mt-6 pt-4 border-t border-gray-200">
                    <div class="flex flex-wrap gap-3 justify-end">
                        {{-- Cancel Button - Always Visible --}}
                        <a href="{{ route('staff.surat.index') }}"
                           class="px-4 py-2 bg-gray-500 text-white text-sm font-medium rounded-lg hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors duration-200"
                           style="opacity: 1 !important; visibility: visible !important; display: inline-flex !important; align-items: center;">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="opacity: 1 !important;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                            <span style="opacity: 1 !important;">Batal</span>
                        </a>
                        
                        {{-- Save Draft Button - Always Visible --}}
                        <button type="button"
                                wire:click="saveDraft"
                                wire:loading.attr="disabled"
                                class="px-4 py-2 bg-gray-600 text-white text-sm font-medium rounded-lg hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-600 transition-colors duration-200 disabled:opacity-50"
                                style="opacity: 1 !important; visibility: visible !important; display: inline-flex !important; align-items: center;">
                            <svg wire:loading.remove wire:target="saveDraft" class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="opacity: 1 !important;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V2"/>
                            </svg>
                            <svg wire:loading wire:target="saveDraft" class="animate-spin h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" style="opacity: 1 !important;">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span wire:loading.remove wire:target="saveDraft" style="opacity: 1 !important;">Simpan Draft</span>
                            <span wire:loading wire:target="saveDraft" style="opacity: 1 !important;">Menyimpan...</span>
                        </button>
                        
                        {{-- Submit Button - Always Visible --}}
                        <button type="button"
                                wire:click="confirmSubmit"
                                wire:loading.attr="disabled"
                                class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 transition-colors duration-200 disabled:opacity-50"
                                style="opacity: 1 !important; visibility: visible !important; display: inline-flex !important; align-items: center;">
                            <svg wire:loading.remove wire:target="submitForReview" class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="opacity: 1 !important;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
                            </svg>
                            <svg wire:loading wire:target="submitForReview" class="animate-spin h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" style="opacity: 1 !important;">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span wire:loading.remove wire:target="submitForReview" style="opacity: 1 !important;">Kirim ke Kaprodi</span>
                            <span wire:loading wire:target="submitForReview" style="opacity: 1 !important;">Mengirim...</span>
                        </button>
                    
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>
                
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>
            
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>
        
    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>
    </form>
    
    {{-- SweetAlert2 for confirmation --}}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('livewire:init', function() {
            Livewire.on('show-submit-confirmation', function() {
                Swal.fire({
                    title: 'Konfirmasi Pengiriman',
                    text: 'Apakah Anda yakin ingin mengirim surat ini ke Kaprodi untuk review? Surat yang sudah dikirim tidak dapat diedit kembali.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#2563eb',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Ya, Kirim!',
                    cancelButtonText: 'Batal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        @this.submitForReview();
                    }
                });
            });
        });
    </script>

    <script>
        // Force button visibility after page loads
        function forceButtonVisibility() {
            const buttons = document.querySelectorAll('button, a[href*="surat"]');
            buttons.forEach(button => {
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.display = button.tagName === 'A' ? 'inline-flex' : 'inline-flex';
                
                // Remove problematic classes
                button.classList.remove('opacity-0', 'invisible', 'hidden');
                
                // Log for debugging
                console.log('Button fixed:', button.textContent.trim());
            });
        }
        
        // Run on page load
        document.addEventListener('DOMContentLoaded', forceButtonVisibility);
        
        // Run after Livewire updates
        if (typeof Livewire !== 'undefined') {
            document.addEventListener('livewire:init', function() {
                Livewire.hook('commit', ({ component, commit, respond }) => {
                    setTimeout(forceButtonVisibility, 100);
                });
            });
        }
        
        // Run after a delay as fallback
        setTimeout(forceButtonVisibility, 1000);
    </script>
</div>